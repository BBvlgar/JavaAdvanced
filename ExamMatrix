package Advanced;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.ArrayList;
import java.util.List;

public class Matrix {



    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int playerX = 0,
                playerY = 0,
                blackhole1X = -1,
                blackhole1Y = -1,

                blackhole2X = -1,
                blackhole2Y = -1;

        int size = Integer.parseInt(scanner.nextLine());

        char[][]playfield = new char[size][size];

        int starPower =0;

        boolean inVoid = false;

        for (int i = 0; i < size; i++) {
            String line = scanner.nextLine();

            if (line.indexOf('S') >= 0) {
                playerX = i;
                playerY = line.indexOf('S');
            }

            if (blackhole1X == -1){
                if (line.indexOf('O') >= 0) {
                    blackhole1X = i;
                    blackhole1Y = line.indexOf('O');
                }
            } else {
                if (line.indexOf('O') >= 0) {
                    blackhole2X = i;
                    blackhole2Y = line.indexOf('O');
                }
            }


            playfield[i] = line.toCharArray();

        }

        while (!inVoid && starPower < 50) {

            String direction = scanner.nextLine();

            switch (direction) {
                case "up":
                    if (playerX - 1 < 0) {
                        playfield[playerX][playerY] = '-';
                        inVoid = true;
                        break;
                    }
                    playerX = playerX - 1;

                    if (playfield[playerX][playerY] != '-' && playfield[playerX][playerY] != 'O'){
                        char ch = playfield[playerX][playerY];

                        String st = Character.toString(ch);

                        starPower += Integer.parseInt(st);

                    }

                    playfield[playerX][playerY] ='S';
                    playfield[playerX + 1][playerY] ='-';

                    break;
                case "down":
                    if (playerX + 1 >= size) {
                        inVoid = true;playfield[playerX][playerY] = '-';
                        break;
                    }
                    playerX = playerX + 1;
                    if (playfield[playerX][playerY] != '-' && playfield[playerX][playerY] != 'O'){
                        char ch = playfield[playerX][playerY];

                        String st = Character.toString(ch);

                        starPower += Integer.parseInt(st);

                    }
                    playfield[playerX][playerY] ='S';
                    playfield[playerX - 1][playerY] ='-';
                    break;
                case "left":
                    if (playerY - 1 < 0) {
                        inVoid = true;
                        playfield[playerX][playerY] = '-';
                        break;
                    }

                    playerY = playerY - 1;
                    if (playfield[playerX][playerY] != '-' && playfield[playerX][playerY] != 'O'){
                        char ch = playfield[playerX][playerY];

                        String st = Character.toString(ch);

                        starPower += Integer.parseInt(st);

                    }
                    playfield[playerX][playerY] ='S';
                    playfield[playerX ][playerY + 1] ='-';

                    break;
                case "right":
                    if (playerY + 1 >= size) {
                        inVoid = true;
                        playfield[playerX][playerY] = '-';
                        break;
                    }

                    playerY = playerY + 1;

                    if (playfield[playerX][playerY] != '-' && playfield[playerX][playerY] != 'O'){
                        char ch = playfield[playerX][playerY];

                        String st = Character.toString(ch);

                        starPower += Integer.parseInt(st);

                    }
                    playfield[playerX][playerY] ='S';
                    playfield[playerX ][playerY - 1] ='-';
                    break;
            }
            if (playerX == blackhole1X && playerY == blackhole1Y){

                int oldX = blackhole1X;
                int oldY = blackhole1Y;


                playerY = blackhole2Y;
                playerX = blackhole2X;

                playfield[oldX][oldY] = '-';

                playfield[playerX][playerY] = 'S';

                blackhole1X = -1;
                blackhole1Y = -1;
                blackhole2Y = -1;
                blackhole2X = -1;



            } else if (playerX == blackhole2X && playerY == blackhole2Y){


                int old2X = blackhole2X;
                int old2Y = blackhole2Y;

                playerY = blackhole1Y;
                playerX = blackhole1X;

                playfield[old2X][old2Y] = '-';

                playfield[playerX][playerY] = 'S';

                blackhole1X = -1;
                blackhole1Y = -1;
                blackhole2Y = -1;
                blackhole2X = -1;

            }
        }

        if (inVoid){

            System.out.println("Bad news, the spaceship went to the void.");
        } else {
            System.out.println("Good news! Stephen succeeded in collecting enough star power!");
        }

        System.out.println(String.format("Star power collected: %d",starPower));

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(playfield[i][j]);
            }
            System.out.println();
        }

    }

}
